@using Our.Umbraco.TableGenerator.Enums
@using Our.Umbraco.TableGenerator.Models
@model Our.Umbraco.TableGenerator.Models.TableData

<h2>
	Bootstrap rendering
</h2>

<hr/>

@if (Model != null)
{
	var firstRow = Model.Cells.FirstOrDefault();
	var rows = Model.Rows.ToList();
	var columns = Model.Columns.ToList();
	var tableStyles = Model.Settings;

	if (firstRow != null)
	{
		<div class="table-responsive">

			<table class="table table-bordered @GetCssClass(tableStyles)">

				<thead>

					<tr class="@GetCssClass(tableStyles, Model.Rows.FirstOrDefault())">

						@foreach (var cell in firstRow)
						{
							<th class="@GetCssClass(tableStyles, columns[cell.ColumnIndex])" scope="col">
								@Html.Raw(cell.Value)
							</th>
						}

					</tr>

				</thead>

				<tbody>

					@foreach (var row in Model.Cells.Skip(1))
					{
						<tr class="@GetCssClass(tableStyles, rows[row.FirstOrDefault().RowIndex])">

							@foreach (var cell in row)
							{
								<td class="@GetCssClass(tableStyles, columns[cell.ColumnIndex])">
									@Html.Raw(cell.Value)
								</td>
							}

						</tr>
					}

				</tbody>

			</table>

		</div>
	}
}

@functions
{
	public string GetCssClass(StyleData tableStyles, StyleData styleData = null)
	{
		var styles = tableStyles.BackgroundColor != BackgroundColour.None
						 ? tableStyles.BackgroundColor
						 : styleData?.BackgroundColor ?? BackgroundColour.None;

		switch (styles)
		{
			case BackgroundColour.OddEven:
				return "table-striped";
			case BackgroundColour.OddEvenReverse:
				return "table-striped";
			case BackgroundColour.Primary:
				return "table-primary";
			case BackgroundColour.Secondary:
				return "table-secondary";
			case BackgroundColour.Tertiary:
				return "table-info";
			default:
				return null;
		}
	}
}